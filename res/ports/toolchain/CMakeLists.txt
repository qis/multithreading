cmake_minimum_required(VERSION 3.31)
project(toolchain LANGUAGES C CXX ASM_MASM)

# Architecture
set(ARCH "${VCPKG_TARGET_ARCHITECTURE}")

# Programs
foreach(PROGRAM IN ITEMS MAKE_PROGRAM C_COMPILER CXX_COMPILER ASM_MASM_COMPILER RC_COMPILER LINKER AR MT)
  cmake_path(CONVERT "${CMAKE_${PROGRAM}}" TO_CMAKE_PATH_LIST CMAKE_${PROGRAM} NORMALIZE)
  get_filename_component(CMAKE_${PROGRAM} "${CMAKE_${PROGRAM}}" REALPATH)
  get_filename_component(CMAKE_${PROGRAM} "${CMAKE_${PROGRAM}}" ABSOLUTE)
  if(NOT EXISTS "${CMAKE_${PROGRAM}}")
    message(FATAL_ERROR "Normalized CMAKE_${PROGRAM} missing: ${CMAKE_${PROGRAM}}")
  endif()
endforeach()

# Ninja
cmake_path(CONVERT "$ENV{DevEnvDir}/CommonExtensions/Microsoft/CMake/Ninja" TO_CMAKE_PATH_LIST NINJA_BIN NORMALIZE)

# Runtime
cmake_path(CONVERT "$ENV{VCToolsInstallDir}" TO_CMAKE_PATH_LIST RUNTIME NORMALIZE)
cmake_path(CONVERT "${RUNTIME}/bin/Hostx64/${ARCH}" TO_CMAKE_PATH_LIST RUNTIME_BIN NORMALIZE)
cmake_path(CONVERT "${RUNTIME}/include" TO_CMAKE_PATH_LIST RUNTIME_INCLUDE NORMALIZE)
cmake_path(CONVERT "${RUNTIME}/lib/${ARCH}" TO_CMAKE_PATH_LIST RUNTIME_LIB NORMALIZE)

# LLVM
if(ARCH STREQUAL "x64")
  cmake_path(CONVERT "$ENV{VCINSTALLDIR}/Tools/Llvm/x64/bin" TO_CMAKE_PATH_LIST LLVM_BIN NORMALIZE)
else()
  cmake_path(CONVERT "$ENV{VCINSTALLDIR}/Tools/Llvm/bin" TO_CMAKE_PATH_LIST LLVM_BIN NORMALIZE)
endif()

# SDK
cmake_path(CONVERT "$ENV{WindowsSdkDir}" TO_CMAKE_PATH_LIST SDK NORMALIZE)
cmake_path(CONVERT "$ENV{WindowsSDKVersion}" TO_CMAKE_PATH_LIST SDK_VERSION NORMALIZE)
cmake_path(CONVERT "${SDK}/bin/${SDK_VERSION}/${ARCH}" TO_CMAKE_PATH_LIST SDK_BIN NORMALIZE)
cmake_path(CONVERT "${SDK}/include/${SDK_VERSION}/ucrt" TO_CMAKE_PATH_LIST SDK_INCLUDE_UCRT NORMALIZE)
cmake_path(CONVERT "${SDK}/include/${SDK_VERSION}/um" TO_CMAKE_PATH_LIST SDK_INCLUDE_UM NORMALIZE)
cmake_path(CONVERT "${SDK}/include/${SDK_VERSION}/shared" TO_CMAKE_PATH_LIST SDK_INCLUDE_SHARED NORMALIZE)
cmake_path(CONVERT "${SDK}/include/${SDK_VERSION}/winrt" TO_CMAKE_PATH_LIST SDK_INCLUDE_WINRT NORMALIZE)
cmake_path(CONVERT "${SDK}/include/${SDK_VERSION}/cppwinrt" TO_CMAKE_PATH_LIST SDK_INCLUDE_CPPWINRT NORMALIZE)
cmake_path(CONVERT "${SDK}/lib/${SDK_VERSION}/ucrt/${ARCH}" TO_CMAKE_PATH_LIST SDK_LIB_UCRT NORMALIZE)
cmake_path(CONVERT "${SDK}/lib/${SDK_VERSION}/um/${ARCH}" TO_CMAKE_PATH_LIST SDK_LIB_UM NORMALIZE)

configure_file(toolchain.cmake.in ${CMAKE_BINARY_DIR}/toolchain.cmake @ONLY LF)
install(FILES ${CMAKE_BINARY_DIR}/toolchain.cmake DESTINATION share)
